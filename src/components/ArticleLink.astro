---
import type { CollectionEntry } from "astro:content";
import { Image } from "astro:assets";
import moment from "moment";
import { calculateReadTime } from "../utils/time";

interface Props {
  post: CollectionEntry<"posts">;
}

const { post } = Astro.props;
---

<a href={`blog/${post.slug}`}>
  <article
    class="group flex justify-between border border-gray-400/65 dark:border-gray-800 gap-10 rounded-md min-h-32 article-container"
  >
    <div class="flex flex-col flex-grow justify-center py-2 overflow-hidden">
      <h2
        class="text-xl font-medium line-clamp-2 text-slate-700 dark:text-slate-200 w-fit ml-5"
      >
        {post.data.title}
      </h2>
      <span class="text-gray-600 dark:text-gray-400 ml-5"
        >{post.data.description}</span
      >
      <span class="text-sm text-gray-600 ml-5"
        >Posted {moment(post.data.date).fromNow()}</span
      >
      <div
        class="w-full h-[1px] bg-gradient-to-r from-slate-300 dark:from-slate-800 to-transparent my-2"
      >
      </div>
      <div class="text-xs flex gap-4 ml-5">
        <span class="text-slate-800 dark:text-slate-300"
          >{calculateReadTime(post.body)} min read</span
        >
        <div class="flex gap-2">
          {
            post.data.categories.map((tag: any) => (
              <span class="text-slate-400 dark:text-slate-500">{tag}</span>
            ))
          }
        </div>
      </div>
    </div>
    <div class="w-[200px] clip hidden md:block h-36">
      <Image
        class="article-image object-cover right-0 z-1 rounded-r image-overlay transition-all h-full"
        src={post.data.image}
        alt={post.data.title}
      />
    </div>
  </article>
</a>
<script>
  import { annotate } from "rough-notation";

  document.querySelectorAll(".article-container").forEach((article) => {
    let annotation: any;

    article.addEventListener("mouseenter", (event: any) => {
      const title = event?.target?.querySelector("h2");

      if (!title) return;

      annotation = annotate(title, {
        type: "highlight",
        color: "rgb(225, 29, 72, 0.75)",
        iterations: 2,
      });

      annotation.show();
    });

    article.addEventListener("mouseleave", () => {
      if (annotation) {
        annotation.remove();
      }
    });
  });
</script>
